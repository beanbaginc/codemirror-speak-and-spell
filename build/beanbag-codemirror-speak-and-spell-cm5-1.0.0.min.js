!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(require("codemirror")):"function"==typeof define&&define.amd?define(["codemirror"],n):n((e="undefined"!=typeof globalThis?globalThis:e||self).CodeMirror)}(this,function(e){"use strict";function n(e){if(e&&e.__esModule)return e;var n=Object.create(null);return e&&Object.keys(e).forEach(function(t){if("default"!==t){var l=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(n,t,l.get?l:{enumerable:!0,get:function(){return e[t]}})}}),n.default=e,Object.freeze(n)}var t=n(e);function l(e){const n=(e.nodeType===Node.ELEMENT_NODE?e:e.parentElement).closest(".CodeMirror-line");let t=0;const l=document.createTreeWalker(n,NodeFilter.SHOW_ELEMENT|NodeFilter.SHOW_TEXT);for(;l.nextNode();){const n=l.currentNode;if(n===e)break;n.nodeType===Node.TEXT_NODE&&(t+=n.data.length)}return t}function r(e,n){const t=e.inputEl,r=n.startContainer,o=n.endContainer,i=r.nodeType===Node.ELEMENT_NODE?r:r.parentElement,u=o.nodeType===Node.ELEMENT_NODE?o:o.parentElement;let a=null,d=null,f=null,c=null,s=null,p=null,E=null,T=null;if(i===t?a=n.startOffset:(E=i.closest(".CodeMirror-line"),f=l(r),c=n.startOffset),u===t?d=n.endOffset:(T=n.endContainer===n.startContainer&&null!==E?E:u.closest(".CodeMirror-line"),s=i===u&&null!==f?f:l(o),p=n.endOffset),null===a||null===d){const e=t.children;for(let n=0;n<e.length&&(null===a||null===d);n++){const t=e[n];null===a&&t===E&&(a=n),null===d&&t===T&&(d=n)}}return[{ch:(f||0)+(c||0),line:a},{ch:(s||0)+(p||0),line:d}]}function o(e,n){var t;if("insertReplacementText"!==n.inputType&&"insertText"!==n.inputType)return;const l=n.getTargetRanges();if(!l||0===l.length)return;const o=n.data??(null===(t=n.dataTransfer)||void 0===t?void 0:t.getData("text"))??null;if(null===o)return;n.preventDefault(),n.stopPropagation();const i=e.cm;for(const n of l){const[t,l]=r(e,n);i.replaceRange(o,t,l,"+input")}}t.defineOption("speakAndSpell",!1,function(e,n,l){l&&l!==t.Init&&function(e){const n=e._speakAndSpellState||null;n&&(n.inputEl.removeEventListener("beforeinput",n.beforeInputHandler),e._speakAndSpellState=null)}(e),n&&function(e,n){const t=e.display.input.div,l=e=>n(r,e);t.addEventListener("beforeinput",l);const r={cm:e,inputEl:t,beforeInputHandler:l};e._speakAndSpellState=r}(e,o)})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
